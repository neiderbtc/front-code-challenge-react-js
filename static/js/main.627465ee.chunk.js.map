{"version":3,"sources":["context/initialState.ts","context/GameContext.tsx","services/levels.ts","components/atoms/Buttons/ButtonLink.tsx","components/pages/Home.tsx","context/gameReducer.tsx","context/GameState.tsx","services/http.ts","hooks/useQuestions.tsx","components/atoms/Buttons/Button.tsx","components/molecules/Cards/CardQuestion.tsx","components/pages/QuestionsChallenge.tsx","components/molecules/Cards/CardResultQuestion.tsx","components/pages/ResultQuestions.tsx","components/pages/Questions.tsx","App.tsx","index.tsx"],"names":["initialState","questions","currentQuestion","questionsResponses","numberOfQuestions","difficulty","total","goodResponses","complete","getQuestion","saveResponse","setComplete","resetGame","setQuestions","changeDifficulty","GameContext","React","createContext","levels","name","value","ButtonLink","text","primary","secundary","to","className","Home","useState","selectedValue","setSelectedValue","useContext","useEffect","onChange","e","target","map","item","index","gameReducer","state","action","type","payload","length","GameState","children","useReducer","dispatch","numberQuestion","result","find","Provider","response","goodsResponses","correct_answer","newObject","get","endpoint","a","fetch","process","status","json","useQuestions","getQuestions","then","results","Button","onClick","CardQuestion","title","question","QuestionsChallenge","nextQuestion","category","CardResultQuestion","icon","faCheck","faTimes","ResultQuestions","goHome","setGoHome","Questions","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.627465ee.chunk.js","sourcesContent":["export const initialState = {\n    questions: [],\n    currentQuestion: null,\n    questionsResponses: [],\n    numberOfQuestions: 0,\n    difficulty: 'easy',\n    total: 0,\n    goodResponses: 0,\n    complete: false,\n    getQuestion: () => {},\n    saveResponse: () => {},\n    setComplete: () => {},\n    resetGame: () => {},\n    setQuestions: () => {},\n    changeDifficulty: () => {},\n}\n\nexport type TypeQuestion = {\n    category: string;\n    type: boolean;\n    difficulty: string,\n    question: string,\n    correct_answer: string,\n    incorrect_answers: string[]\n}\n\nexport interface InterfaceQuestionResponse extends TypeQuestion {\n    response: boolean; \n }\n\nexport interface AppContextInterface {\n    questions: TypeQuestion[],\n    currentQuestion: TypeQuestion | null;\n    numberOfQuestions: number;\n    questionsResponses: InterfaceQuestionResponse[];\n    getQuestion: Function;\n    saveResponse: Function;\n    setComplete: Function;\n    setQuestions: Function;\n    resetGame: Function;\n    changeDifficulty: Function;\n    difficulty: string;\n    total: number;\n    goodResponses: number;\n    complete: boolean;\n  }\n\n\n","import React from 'react';\nimport { AppContextInterface, initialState } from './initialState';\n\n\nconst GameContext = React.createContext<AppContextInterface>(initialState);\n\n\nexport default GameContext;","export const levels = [\n    { name: 'Any Difficulty', value: '' },\n    { name: 'Easy', value: 'easy' },\n    { name: 'Medium', value: 'medium' },\n    { name: 'Hard', value: 'hard' }];","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n    text: string;\n    primary?: boolean;\n    secundary?: boolean;\n    to: string;\n}\n\nconst ButtonLink: FC<Props> = ({ text, primary, secundary, to }) => {\n    return (\n        <Link to={to} >\n            <div className={\n                `btn-link \n            ${primary ? 'bg-primary text-white' : ' '}\n            ${secundary ? 'bg-segundary text-black' : ' '}\n            `}>\n\n                {text}\n            </div>\n        </Link>\n    )\n}\nexport default ButtonLink;","import React, { ChangeEvent, FC, useContext, useEffect, useState } from 'react';\nimport GameContext from '../../context/GameContext';\nimport { levels } from '../../services/levels';\nimport ButtonLink from '../atoms/Buttons/ButtonLink';\n\n\nconst Home: FC = () => {\n\n    const [selectedValue, setSelectedValue] = useState(\"hard\");\n    const { resetGame, changeDifficulty } = useContext(GameContext);\n    useEffect(() => {\n        resetGame();\n    }, [])\n\n    useEffect(() => {\n        changeDifficulty(selectedValue)\n    }, [selectedValue])\n\n    const onChange = (e: ChangeEvent) => {\n        const target = e.target as HTMLInputElement;\n        setSelectedValue(target.value)\n    }\n\n    return (\n\n        <div className=\"container\">\n            <div className=\"title-page\">\n                Welcome to the Trivia Challenge\n            </div>\n\n            <div className=\"information-game\">\n\n                You will be presented with 10 True or False questions.\n\n            </div>\n            <div className=\"information-game\">\n                Can you score 100%?\n            </div>\n            <div className=\"container-select\">\n                <select onChange={onChange} >\n                    {\n                        levels.map((item, index) => (\n                            <option key={index} value={item.value}>{item.name} </option>\n                        ))\n                    }\n                </select>\n            </div>\n            <div className=\"button-start\">\n                <ButtonLink to=\"/questions\" primary text=\"BEGIN\" />\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","import { AppContextInterface, initialState, InterfaceQuestionResponse, TypeQuestion } from \"./initialState\"\n\ntype ActionTypes =\n  {\n    type: 'set_questions'\n    payload: TypeQuestion[]\n  }\n  | {\n    type: 'get_question'\n    payload: { numberOfQuestions: number; currentQuestion: TypeQuestion } | null\n  }\n  |\n  {\n    type: 'save_response',\n    payload: InterfaceQuestionResponse[]\n  }\n  |\n  {\n    type: 'set_complete',\n    payload: boolean\n  }\n  |\n  {\n    type: 'reset_game'\n  }\n  |\n  {\n    type: 'change_difficulty',\n    payload: string;\n  }\n\n\nconst gameReducer = (state: AppContextInterface, action: ActionTypes) => {\n  switch (action.type) {\n    case 'set_questions':\n      return {\n        ...state,\n        questions: action.payload,\n        total: action.payload.length,\n      }\n    case 'get_question':\n      return {\n        ...state,\n        ...action.payload,\n      }\n    case 'save_response':\n      return {\n        ...state,\n        questionsResponses: action.payload,\n      }\n    case 'set_complete':\n      return {\n        ...state,\n        complete: action.payload,\n      }\n    case 'change_difficulty':\n      return {\n        ...state,\n        difficulty: action.payload,\n      }\n    case 'reset_game':\n      return initialState\n    default:\n      return state\n  }\n}\n\nexport default gameReducer;\n","import React, { useEffect, useReducer, FC } from 'react';\nimport GameContext from './GameContext';\nimport gameReducer from './gameReducer';\nimport { initialState, TypeQuestion } from './initialState';\n\ntype Props = {\n    children: JSX.Element | JSX.Element[]\n}\n\nconst GameState: FC<Props> = ({ children }) => {\n\n    const [state, dispatch] = useReducer(gameReducer, initialState);\n\n    const setQuestions = (questions: TypeQuestion[]) => {\n\n        dispatch({\n            type: 'set_questions',\n            payload: questions\n        })\n\n    }\n    \n    useEffect(() => {\n        getQuestion(0)\n    },[state.questions])\n\n    const getQuestion = (numberQuestion: number) => {\n\n        const result = state.questions.find((item, index) => index === numberQuestion);\n        if (result) {\n            dispatch({\n                type: 'get_question',\n                payload: { currentQuestion: result, numberOfQuestions: numberQuestion },\n            })\n        }\n    }\n\n    const saveResponse = (response: string) => {\n\n        if (state.currentQuestion) {\n            let result = false;\n            let goodsResponses = state.goodResponses;\n            if (state.currentQuestion.correct_answer === response) {\n                result = true;\n                goodsResponses = state.goodResponses++;\n\n            }\n            const newObject = [...state.questionsResponses, {\n                ...state.currentQuestion,\n                response: result,\n                goodsResponses: goodsResponses\n            }];\n\n            dispatch({\n                type: 'save_response',\n                payload: newObject\n            })\n        }\n    }\n\n    const setComplete = (value: boolean) => {\n        dispatch({\n            type: 'set_complete',\n            payload: value\n        })\n    }\n\n    const resetGame = () => {\n        dispatch({\n            type: 'reset_game'\n        })\n    }\n\n    const changeDifficulty = (difficulty:  string) => {\n            dispatch({\n                type: 'change_difficulty',\n                payload: difficulty    \n            })\n    } \n\n    return (\n        <GameContext.Provider value={\n            {\n                questions: state.questions,\n                currentQuestion: state.currentQuestion,\n                numberOfQuestions: state.numberOfQuestions,\n                questionsResponses: state.questionsResponses,\n                total: state.total,\n                goodResponses: state.goodResponses,\n                complete: state.complete,\n                difficulty: state.difficulty,\n                getQuestion,\n                saveResponse,\n                setComplete,\n                resetGame,\n                setQuestions,\n                changeDifficulty\n            }\n        }>\n            {children}\n        </GameContext.Provider>\n    );\n};\n\n\nexport default GameState;","const SERVER_URL = process.env.REACT_APP_API_URL\n\nconst get = async (endpoint: string) => {\n    const response = await fetch(`${SERVER_URL}${endpoint}`);\n    if (response.status === 200) {\n        return response.json();\n    }\n    return false;\n}\n\nexport { get }","import { useState } from 'react';\nimport { get } from '../services/http';\n\ntype TQuestion = {\n    category: string;\n    type: boolean;\n    difficulty: string,\n    question: string,\n    correct_answer: string,\n    incorrect_answers: string[]\n}\n\n\n\nconst useQuestions = () => {\n    const [questions, setQuestions] = useState<TQuestion[]>([]);\n\n    const getQuestions = (difficulty?: string) => {\n\n        get(`api.php?amount=10&type=boolean${difficulty ? `&difficulty=${difficulty}` : ''} `)\n            .then((response: { response_code: number; results: TQuestion[] }) => {\n                if (response) setQuestions(response.results)\n            });\n    }\n\n    return { questions, getQuestions };\n};\n\nexport default useQuestions;","import React, { FC } from 'react';\n\ntype Props = {\n    text: string;\n    primary?: boolean;\n    secundary?: boolean;\n    onClick: Function\n}\n\nconst Button: FC<Props> = ({ text, primary, secundary, onClick }) => {\n    return (\n        <button type=\"button\"\n            onClick={() => onClick()} className={\n                `btn \n            ${primary ? 'bg-primary text-white' : ' '}\n            ${secundary ? 'bg-segundary text-black' : ' '}\n            `}>\n            {text}\n        </button>\n    )\n}\nexport default Button;","import React, { FC } from 'react';\nimport Button from '../../atoms/Buttons/Button';\n\ntype Props = {\n    title: string;\n    question: string;\n    onClick: Function\n}\n\nconst CardQuestion: FC<Props> = ({ title, question, onClick }) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-question\">\n                <div className=\"card-category-title\">\n                    {title}\n                </div>\n                <div className=\"card-question-content\">\n                    {\n                        question\n                    }\n                </div>\n            </div>\n            <div className=\"buttons\">\n                <Button onClick={()=> onClick(\"False\")} secundary text=\"False\" />\n                <Button onClick={()=> onClick(\"True\")} primary text=\"True\" />\n            </div>\n        </div>\n    );\n};\n\nexport default CardQuestion;","import React, { useContext, useEffect, FC } from 'react';\nimport GameContext from '../../context/GameContext';\nimport useQuestions from '../../hooks/useQuestions';\nimport CardQuestion from '../molecules/Cards/CardQuestion';\n\nconst QuestionsChallenge: FC = () => {\n    const {\n        currentQuestion,\n        getQuestion,\n        numberOfQuestions,\n        saveResponse,\n        total,\n        setComplete,\n        setQuestions,\n        difficulty\n    } = useContext(GameContext);\n\n    const { getQuestions, questions } = useQuestions();\n\n    useEffect(() => {\n        getQuestions(difficulty);\n    }, [])\n\n    useEffect(() => {\n        setQuestions(questions);\n    }, [questions])\n\n    const onClick = (response: string) => {\n        saveResponse(response);\n        const nextQuestion = numberOfQuestions + 1;\n        if (nextQuestion < total) {\n            getQuestion(nextQuestion);\n            return true;\n        }\n        setComplete(true);\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"title-page\">\n                Front Coding Challenge\n            </div>\n            {currentQuestion ? <>\n                <div className=\"subcontainer\">\n                    <CardQuestion onClick={onClick}\n                        title={currentQuestion.category}\n                        question={currentQuestion.question} />\n                    <div className=\"paginate-question\">\n                        {`${numberOfQuestions + 1} / 10`}\n                    </div>\n                </div>\n            </>\n                : <div>cargando</div>\n            }\n        </div>\n    );\n};\n\nexport default QuestionsChallenge;","import React, { FC } from 'react';\nimport { faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\ntype Props = {\n    text: string;\n    response: boolean;\n}\n\nconst CardResultQuestion: FC<Props> = ({ text, response }) => {\n    return (\n        <div className=\"card-result-question\">\n            {\n                response ?\n                    <FontAwesomeIcon icon={faCheck} />\n                    :\n                    <FontAwesomeIcon icon={faTimes} />\n            }\n            <div>{text}</div>\n        </div>\n    );\n};\n\nexport default CardResultQuestion;","import React, { useContext, useState, FC } from 'react';\nimport { Redirect } from 'react-router';\nimport GameContext from '../../context/GameContext';\nimport Button from '../atoms/Buttons/Button';\nimport CardResultQuestion from '../molecules/Cards/CardResultQuestion';\n\nconst ResultQuestions: FC = () => {\n\n    const { questionsResponses, total, goodResponses, resetGame } = useContext(GameContext);\n    const [goHome, setGoHome] = useState<boolean>(false);\n\n    const changeGoHome = () => setGoHome(true);\n    return (\n        <div className=\"container height-100\">\n            <div className=\"title-page\">\n                {`You score \\n ${goodResponses}/${total}`}\n            </div>\n            {goHome ? <Redirect to=\"/\" /> :\n                <div className=\"result-container\">\n                    {\n                        questionsResponses.map((item, index) => (\n\n                            <CardResultQuestion\n                                key={index}\n                                text={item.question}\n                                response={item.response}\n                            />\n                        ))\n                    }\n                </div>\n\n            }\n            <div className=\"buttons-results\">\n                <Button primary text=\"PLAY AGAIN?\" onClick={resetGame} />\n                <Button secundary text=\"GO TO START?\" onClick={changeGoHome} />\n            </div>\n\n        </div>\n    );\n};\n\nexport default ResultQuestions;","import React, { useContext, FC } from 'react';\nimport GameContext from '../../context/GameContext';\nimport QuestionsChallenge from './QuestionsChallenge';\nimport ResultQuestions from './ResultQuestions';\n\n\n\nconst Questions: FC = () => {\n\n    const { complete } = useContext(GameContext);\n\n    return (\n        complete ? <ResultQuestions /> : <QuestionsChallenge />\n    );\n};\n\n\nexport default Questions;","import Home from './components/pages/Home';\nimport GameState from './context/GameState';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Questions from './components/pages/Questions';\nconst App = () => {\n  return (\n    <GameState>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/questions\" component={Questions} />\n        </Switch>\n      </Router>\n    </GameState>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/css/index.css'\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}